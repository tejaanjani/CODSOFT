# -*- coding: utf-8 -*-
"""CODSOFT Task 04- Recommendation System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DCbqdIiSaiDYOrt_W1oOO5_f2_d5O6tD
"""

import numpy as np
import pandas as pd

movies = pd.read_csv('/content/tmdb_5000_movies.csv')
credits = pd.read_csv('/content/tmdb_5000_credits.csv')

movies.head(5)

movies.shape

credits.head()

#Merge the two dataframes on the 'title' column
movies = movies.merge(credits,on='title')

movies.head()

#Selecting relevant columns
movies = movies[['movie_id','title','overview','genres','keywords','cast','crew']]

movies.head()

#Define a function to convert text data to a list of strings
def convert(text):
    L = []
    for i in ast.literal_eval(text):
        L.append(i['name'])
    return L

#Applying the 'convert' function to 'genres' and 'keywords' columns
movies['genres'] = movies['genres'].apply(convert)
movies['keywords'] = movies['keywords'].apply(convert)

import ast
ast.literal_eval('[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]')

#Define a function to extract the top 3 cast members
def convert3(text):
    L = []
    counter = 0
    for i in ast.literal_eval(text):
        if counter < 3:
            L.append(i['name'])
        counter+=1
    return L

#Apply the 'convert3' function to 'cast' column
movies['cast'] = movies['cast'].apply(convert)
movies.head()

#Define a function to fetch the directors
def fetch_director(text):
    L = []
    for i in ast.literal_eval(text):
        if i['job'] == 'Director':
            L.append(i['name'])
    return L

#Apply the 'fetch_director' function to 'crew' column
movies['crew'] = movies['crew'].apply(fetch_director)

def collapse(L):
    L1 = []
    for i in L:
        L1.append(i.replace(" ",""))
    return L1

movies['overview'] = movies['overview'].apply(lambda x: x.split() if isinstance(x, str) else [])

#Prepare tags for each movie by combining various features:
movies['cast'] = movies['cast'].apply(collapse)
movies['crew'] = movies['crew'].apply(collapse)
movies['genres'] = movies['genres'].apply(collapse)
movies['keywords'] = movies['keywords'].apply(collapse)
movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

movies.head()

#Remove unnecessary columns
new = movies.drop(columns=['overview', 'genres', 'keywords', 'cast', 'crew'])

new.head()

#Join the tag lists into a single string
new['tags'] = new['tags'].apply(lambda x: " ".join(x))

#Import CountVectorizer to convert tags into a numerical matrix:
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words='english')

#Transform the 'tags' column into a numerical matrix
vector = cv.fit_transform(new['tags']).toarray()

vector.shape

from sklearn.metrics.pairwise import cosine_similarity
similarity = cosine_similarity(vector)

new[new['title'] == 'The Lego Movie'].index[0]

#Define a function to recommend movies based on similarity
def recommend(movie):
    index = new[new['title'] == movie].index[0]
    distances = sorted(enumerate(similarity[index]), key=lambda x: x[1], reverse=True)
    for i in distances[1:6]:
        print(new.iloc[i[0]].title)

#Call the 'recommend' function to get movie recommendations based on a given movie
recommend('Gandhi')