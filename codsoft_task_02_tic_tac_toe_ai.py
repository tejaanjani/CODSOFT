# -*- coding: utf-8 -*-
"""CODSOFT Task 02 - TIC-TAC-TOE AI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cxSIAe9tQZwfc6UHykk6PPoIqUXrgpLQ
"""

# Function to print Tic Tac Toe
def print_tic_tac_toe(values):
    print("\n")
    print("\t     |     |")
    print("\t  {}  |  {}  |  {}".format(values[0], values[1], values[2]))
    print('\t_____|_____|_____')

    print("\t     |     |")
    print("\t  {}  |  {}  |  {}".format(values[3], values[4], values[5]))
    print('\t_____|_____|_____')

    print("\t     |     |")
    print("\t  {}  |  {}  |  {}".format(values[6], values[7], values[8]))
    print("\t     |     |")
    print("\n")

# Function to check if any player has won
def check_win(player_position, current_player):
    soln = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]
    for x in soln:
        if all(y in player_position[current_player] for y in x):
            return True
    return False

# Function to check if the board is full
def check_full(values):
    return len([x for x in values if x == ' ']) == 0

# Function to evaluate the score of the board
def evaluate(values, player_position):
    if check_win(player_position, 'X'):
        return 10
    elif check_win(player_position, 'O'):
        return -10
    else:
        return 0

# Function to implement Minimax algorithm with Alpha-Beta Pruning
def minimax(values, player_position, depth, alpha, beta, is_max):
    score = evaluate(values, player_position)
    if score == 10 or score == -10 or check_full(values):
        return score
    if is_max:
        best = -1000
        for i in range(9):
            if values[i] == ' ':
                values[i] = 'X'
                player_position['X'].append(i)
                best = max(best, minimax(values, player_position, depth + 1, alpha, beta, not is_max))
                alpha = max(alpha, best)
                values[i] = ' '
                player_position['X'].remove(i)
                if beta <= alpha:
                    break
        return best
    else:
        best = 1000
        for i in range(9):
            if values[i] == ' ':
                values[i] = 'O'
                player_position['O'].append(i)
                best = min(best, minimax(values, player_position, depth + 1, alpha, beta, not is_max))
                beta = min(beta, best)
                values[i] = ' '
                player_position['O'].remove(i)
                if beta <= alpha:
                    break
        return best

# Function to find the best move for the AI player
def find_best_move(values, player_position):
    best_val = -1000
    best_move = -1
    for i in range(9):
        if values[i] == ' ':
            values[i] = 'X'
            player_position['X'].append(i)
            move_val = minimax(values, player_position, 0, -1000, 1000, False)
            values[i] = ' '
            player_position['X'].remove(i)
            if move_val > best_val:
                best_val = move_val
                best_move = i
    return best_move

# Function for a single game of Tic Tac Toe
def single_game(current_player):
    values = [' ' for x in range(9)]
    player_position = {'X': [], 'O': []}
    while True:
        print_tic_tac_toe(values)
        if current_player == 'X':
            print("AI Player's turn. Which box? : ")
            move = find_best_move(values, player_position)
            print(move + 1)
        else:
            try:
                print("Human Player's turn. Which box? : ", end="")
                move = int(input()) - 1
            except ValueError:
                print("Wrong Input!!! Try Again")
                continue
        if move < 0 or move > 8:
            print("Wrong Input!!! Try Again")
            continue
        if values[move] != ' ':
            print("Place already filled. Try again!!")
            continue
        values[move] = current_player
        player_position[current_player].append(move)
        if check_win(player_position, current_player):
            print_tic_tac_toe(values)
            print("Player ", current_player, " has won the game!!")
            return current_player
        if check_full(values):
            print_tic_tac_toe(values)
            print("Game Over. It's a Tie!!")
            return 'Tie'
        if current_player == 'X':
            current_player = 'O'
        else:
            current_player = 'X'

# Function for playing Tic Tac Toe game
def play_game():
    print("Tic Tac Toe")
    print("AI Player [X] --- Human Player [O]\n")
    current_player = 'X'
    single_game(current_player)

play_game()